const e=location.pathname.split("/").slice(0,-1).join("/"),p=[e+"/_app/immutable/entry/app.HJClLpxA.js",e+"/_app/immutable/nodes/0.ncMrnIM5.js",e+"/_app/immutable/assets/0.RxHDiVyp.css",e+"/_app/immutable/nodes/1.TNV_6jA8.js",e+"/_app/immutable/nodes/2.IDjHuI9w.js",e+"/_app/immutable/chunks/entry.vpqrxGxX.js",e+"/_app/immutable/chunks/index.cybqkRHa.js",e+"/_app/immutable/chunks/scheduler.zMJaRgub.js",e+"/_app/immutable/entry/start.F3i6Z4V1.js"],l=[e+"/favicon.png",e+"/icon.svg",e+"/manifest.json"],u="1706791565191",i=`cache-${u}`,r=[...p,...l];self.addEventListener("install",a=>{async function n(){await(await caches.open(i)).addAll(r)}a.waitUntil(n())});self.addEventListener("activate",a=>{async function n(){for(const t of await caches.keys())t!==i&&await caches.delete(t)}a.waitUntil(n())});self.addEventListener("fetch",a=>{if(a.request.method!=="GET")return;async function n(){const t=new URL(a.request.url),c=await caches.open(i);if(r.includes(t.pathname)){const s=await c.match(t.pathname);if(s)return s}try{const s=await fetch(a.request);if(!(s instanceof Response))throw new Error("invalid response from fetch");return s.status===200&&await c.put(a.request,s.clone()),s}catch(s){const o=await c.match(a.request);if(o)return o;throw s}}a.respondWith(n())});
